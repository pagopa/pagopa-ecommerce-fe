# Azure DevOps pipeline to release a new version and deploy to production.

parameters:
  - name: 'DEV_DEPLOY'
    displayName: 'Deploy on DEV environment'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'UAT_PROD_DEPLOY'
    displayName: 'Deploy on UAT then PROD environments'
    type: boolean
    default: False
    values:
      - False
      - True
  - name: 'RELEASE_SEMVER'
    displayName: 'When packing a release, define the version bump to apply (release is done automatically when deploying on UAT and skipped on DEV) '
    type: string
    values:
      - major
      - minor
      - patch
    default: minor
  - name: 'USE_ECOMMERCE_CDN'
    displayName: 'Boolean parameter used to indicate if use eCommerce CDN or Checkout one'
    type: boolean
    default: true
    values:
      - false
      - true


variables:
  NODE_VERSION: 18.17.1
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
  ${{ if eq(parameters['USE_ECOMMERCE_CDN'], true) }}:
      DEV_STORAGE_BLOB_SYNC: az storage blob sync --container '$web' --account-name pagopadweuecommercecdnsa -s '$(Pipeline.Workspace)/Bundle_DEV'
      DEV_PURGE_CDN_COMMAND: az cdn endpoint purge -g pagopa-d-ecommerce-fe-rg -n pagopa-d-weu-ecommerce-cdn-endpoint --profile-name pagopa-d-weu-ecommerce-cdn-profile --content-paths "/*"
      UAT_STORAGE_BLOB_SYNC: az storage blob sync --container '$web' --account-name pagopauweuecommercecdnsa -s '$(Pipeline.Workspace)/Bundle_UAT'
      UAT_PURGE_CDN_COMMAND: az cdn endpoint purge -g pagopa-u-ecommerce-fe-rg -n pagopa-u-weu-ecommerce-cdn-endpoint --profile-name pagopa-u-weu-ecommerce-cdn-profile --content-paths "/*"
      PROD_STORAGE_BLOB_SYNC: az storage blob sync --container '$web' --account-name pagopapweuecommercecdnsa -s '$(Pipeline.Workspace)/Bundle_PROD'
      PROD_PURGE_CDN_COMMAND: az cdn endpoint purge -g pagopa-p-ecommerce-fe-rg -n pagopa-p-weu-ecommerce-cdn-endpoint --profile-name pagopa-p-weu-ecommerce-cdn-profile --content-paths "/*"
  ${{ else }}:
      DEV_STORAGE_BLOB_SYNC: az storage blob sync --container '$web' --account-name pagopadcheckoutsa -s '$(Pipeline.Workspace)/Bundle_DEV' -d 'ecommerce-fe/'
      DEV_PURGE_CDN_COMMAND: az cdn endpoint purge -g pagopa-d-checkout-fe-rg -n pagopa-d-checkout-cdn-endpoint --profile-name pagopa-d-checkout-cdn-profile --content-paths "/*"
      UAT_STORAGE_BLOB_SYNC: az storage blob sync --container '$web' --account-name pagopaucheckoutsa -s '$(Pipeline.Workspace)/Bundle_UAT' -d 'ecommerce-fe/'
      UAT_PURGE_CDN_COMMAND: az cdn endpoint purge -g pagopa-u-checkout-fe-rg -n pagopa-u-checkout-cdn-endpoint --profile-name pagopa-u-checkout-cdn-profile --content-paths "/*"
      PROD_STORAGE_BLOB_SYNC: az storage blob sync --container '$web' --account-name pagopapcheckoutsa -s '$(Pipeline.Workspace)/Bundle_PROD' -d 'ecommerce-fe/'
      PROD_PURGE_CDN_COMMAND: az cdn endpoint purge -g pagopa-p-checkout-fe-rg -n pagopa-p-checkout-cdn-endpoint --profile-name pagopa-p-checkout-cdn-profile --content-paths "/*"
      

# Only manual activations are intended
trigger: none
pr: none

# This pipeline has been implemented to be run on hosted agent pools based both
# on 'windows' and 'ubuntu' virtual machine images and using the scripts defined
# in the package.json file. Since we are deploying on Azure functions on Windows
# runtime, the pipeline is currently configured to use a Windows hosted image for
# the build and deploy.
pool:
  vmImage: 'ubuntu-22.04'

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v19
      endpoint: 'io-azure-devops-github-ro'

    - repository: checkoutTests
      type: github
      name: pagopa/pagopa-checkout-tests
      ref: main
      endpoint: 'io-azure-devops-github-ro'

stages:
  - stage: Prepare_artifact_dev
    condition: and(succeeded(), eq(${{parameters.DEV_DEPLOY}}, true))
    dependsOn: []
    jobs:
      - job: make_build
        pool:
          vmImage: 'ubuntu-22.04'
        steps:
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              # On the assumption that this stage is executed only when Relase stage is,
              #  with this parameter we set the reference the deploy script must pull changes from.
              # The branch/tag name is calculated from the source branch
              #  ex: Build.SourceBranch=refs/heads/release/pagopa-porting --> release/pagopa-porting
              #  ex: Build.SourceBranch=refs/tags/v1.2.3-RELEASE --> v1.2.3-RELEASE
              gitReference: ${{ replace(replace(variables['Build.SourceBranch'], 'refs/tags/', ''), 'refs/heads/', '') }}

          - template: azure-templates/setup-env.yml
            parameters:
              env: 'DEV'
              api_timeout: 10000
              api_host: 'https://api.dev.platform.pagopa.it'
              checkout_api_path: "/ecommerce/checkout/v1"
              checkout_api_v2_path: "/ecommerce/checkout/v2"
              io_api_v1_path: "/ecommerce/webview/v1"
              npg_sdk_url: 'https://stg-ta.nexigroup.com/monetaweb/resources/hfsdk.js'
              gdi_check_timeout: 20000
              io_client_redirect_outcome_path: 'https://api.dev.platform.pagopa.it/ecommerce/io-outcomes/v1/transactions'
              checkout_client_redirect_outcome_path: 'https://dev.checkout.pagopa.it/v2/esito'
              show_continue_io_btn_delay_millis: 2000
              io_client_redirect_card_data_outcome_path: 'https://api.dev.platform.pagopa.it/ecommerce/io-outcomes/v1/payments/cards/outcomes'
              io_client_save_card_fail_redirect: 'https://api.dev.platform.pagopa.it/payment-wallet-outcomes/v1/wallets/contextual-onboard/outcomes'
              use_ecommerce_fe_root_path: ${{parameters.USE_ECOMMERCE_CDN}}

          - script: |
              yarn build
            displayName: 'Build with `/` root path'
            condition: eq(${{parameters.USE_ECOMMERCE_CDN}}, true)

          - script: |
              yarn build:ecommerce-fe-root
            displayName: 'Build with `/ecommerce-fe` root path'
            condition: eq(${{parameters.USE_ECOMMERCE_CDN}}, false)
            
          - publish: $(System.DefaultWorkingDirectory)/dist
            artifact: Bundle_DEV

  - stage: Deploy_DEV_pagoPA
    dependsOn:
      - Prepare_artifact_dev
    jobs:
      - job: 'deploy'
        steps:
          - checkout: none

          - download: current
            artifact: Bundle_DEV

          - task: AzureCLI@1
            displayName: 'Sync checkout storage on DEV'
            inputs:
              azureSubscription: 'DEV-PAGOPA-SERVICE-CONN'
              scriptLocation: inlineScript
              inlineScript: |
                ${{ variables.DEV_STORAGE_BLOB_SYNC }}

          - task: AzureCLI@1
            displayName: 'Purge CDN endpoint on DEV'
            inputs:
              azureSubscription: 'DEV-PAGOPA-SERVICE-CONN'
              scriptLocation: inlineScript
              inlineScript: |
                ${{ variables.DEV_PURGE_CDN_COMMAND }}

  # - stage: End_to_End_Tests_DEV
  #   dependsOn:
  #     - Deploy_DEV_pagoPA
  #   pool:
  #     vmImage: 'ubuntu-22.04'
  #   jobs:
  #     - job: e2e_tests
  #       steps:
  #         - template: .devops/azure-templates/e2e-tests.yaml@checkoutTests
  #           parameters:
  #             ENVIRONMENT: DEV
  #             CHECKOUT_RESOURCE_REPO_NAME: checkoutTests

  # Create a relase
  # Activated when ONE OF these are met:
  # - is on branch main
  # - is a tag in the form v{version}-RELEASE

  - stage: Release
    dependsOn: []
    condition:
      and(
        succeeded(),
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          and(
            startsWith(variables['Build.SourceBranch'], 'refs/tags'),
            endsWith(variables['Build.SourceBranch'], '-RELEASE')
          )
        )
      )
    pool:
      vmImage: 'ubuntu-22.04'
    jobs:
      - job: make_release
        steps:
        - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              persistCredentials: true
          - template: templates/node-github-release/template.yaml@pagopaCommons
            parameters:
              semver: '${{ parameters.RELEASE_SEMVER }}'
              gitEmail: $(GIT_EMAIL)
              gitUsername: $(GIT_USERNAME)
              gitHubConnection: $(GITHUB_CONNECTION)
              release_branch: main

        - ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/main') }}:
          - script: |
              echo "We assume this reference to be a valid release: $(Build.SourceBranch). Therefore, there is no need to bundle a new release."
            displayName: 'Skip release bundle'
  # Prepare Artifact
  - stage: Prepare_artifact_uat
    dependsOn:
      - Release
    jobs:
      - job: make_build
        pool:
          vmImage: 'ubuntu-22.04'
        steps:
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              # On the assumption that this stage is executed only when Relase stage is,
              #  with this parameter we set the reference the deploy script must pull changes from.
              # The branch/tag name is calculated from the source branch
              #  ex: Build.SourceBranch=refs/heads/main --> main
              #  ex: Build.SourceBranch=refs/tags/v1.2.3-RELEASE --> v1.2.3-RELEASE
              gitReference: ${{ replace(replace(variables['Build.SourceBranch'], 'refs/tags/', ''), 'refs/heads/', '') }}

          - template: azure-templates/setup-env.yml
            parameters:
              env: 'UAT'
              api_timeout: 10000
              api_host: 'https://api.uat.platform.pagopa.it'
              checkout_api_path: "/ecommerce/checkout/v1"
              checkout_api_v2_path: "/ecommerce/checkout/v2"
              io_api_v1_path: "/ecommerce/webview/v1"
              npg_sdk_url: 'https://stg-ta.nexigroup.com/monetaweb/resources/hfsdk.js'
              gdi_check_timeout: 20000
              io_client_redirect_outcome_path: 'https://api.uat.platform.pagopa.it/ecommerce/io-outcomes/v1/transactions'
              checkout_client_redirect_outcome_path: 'https://uat.checkout.pagopa.it/v2/esito'
              show_continue_io_btn_delay_millis: 2000
              io_client_redirect_card_data_outcome_path: 'https://api.uat.platform.pagopa.it/ecommerce/io-outcomes/v1/payments/cards/outcomes'
              io_client_save_card_fail_redirect: 'https://api.uat.platform.pagopa.it/payment-wallet-outcomes/v1/wallets/contextual-onboard/outcomes'
              use_ecommerce_fe_root_path: ${{parameters.USE_ECOMMERCE_CDN}}

          - script: |
              yarn build
            displayName: 'Build with `/` root path'
            condition: eq(${{parameters.USE_ECOMMERCE_CDN}}, true)

          - script: |
              yarn build:ecommerce-fe-root
            displayName: 'Build with `/ecommerce-fe` root path'
            condition: eq(${{parameters.USE_ECOMMERCE_CDN}}, false)

          - publish: $(System.DefaultWorkingDirectory)/dist
            artifact: Bundle_UAT

  - stage: UAT_Deploy_approval
    dependsOn:
      - Prepare_artifact_uat
    jobs:
      - job: Deploy_UAT_WaitForApproval
        displayName: Wait for UAT approval
        pool: server
        timeoutInMinutes: 4320 # 3 days
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 4320 # 3 days
          inputs:
            onTimeout: 'skip'

  - stage: Deploy_UAT_pagoPA
    dependsOn:
      - UAT_Deploy_approval
    jobs:
      - job: 'deploy'
        steps:
          - checkout: none

          - download: current
            artifact: Bundle_UAT

          - task: AzureCLI@1
            displayName: 'Sync checkout storage on UAT'
            inputs:
              azureSubscription: 'UAT-PAGOPA-SERVICE-CONN'
              scriptLocation: inlineScript
              inlineScript: |
                ${{ variables.UAT_STORAGE_BLOB_SYNC }}

          - task: AzureCLI@1
            displayName: 'Purge CDN endpoint on UAT'
            inputs:
              azureSubscription: 'UAT-PAGOPA-SERVICE-CONN'
              scriptLocation: inlineScript
              inlineScript: |
                ${{ variables.UAT_PURGE_CDN_COMMAND }}


  # - stage: End_to_End_Tests_UAT
  #   dependsOn:
  #     - Deploy_UAT_pagoPA
  #   pool:
  #     vmImage: 'ubuntu-22.04'
  #   jobs:
  #     - job: e2e_tests
  #       steps:
  #         - template: .devops/azure-templates/e2e-tests.yaml@checkoutTests
  #           parameters:
  #             ENVIRONMENT: UAT
  #             CHECKOUT_RESOURCE_REPO_NAME: checkoutTests

    # Prepare Artifact
  - stage: Prepare_artifact_prod
    dependsOn:
      - Deploy_UAT_pagoPA
    jobs:
      - job: make_build
        pool:
          vmImage: 'ubuntu-22.04'
        steps:
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              # On the assumption that this stage is executed only when Relase stage is,
              #  with this parameter we set the reference the deploy script must pull changes from.
              # The branch/tag name is calculated from the source branch
              #  ex: Build.SourceBranch=refs/heads/main --> main
              #  ex: Build.SourceBranch=refs/tags/v1.2.3-RELEASE --> v1.2.3-RELEASE
              gitReference: ${{ replace(replace(variables['Build.SourceBranch'], 'refs/tags/', ''), 'refs/heads/', '') }}

          - template: azure-templates/setup-env.yml
            parameters:
              env: 'PROD'
              api_timeout: 10000
              api_host: 'https://api.platform.pagopa.it'
              checkout_api_path: "/ecommerce/checkout/v1"
              checkout_api_v2_path: "/ecommerce/checkout/v2"
              io_api_v1_path: "/ecommerce/webview/v1"
              npg_sdk_url: 'https://xpay.nexigroup.com/monetaweb/resources/hfsdk.js'
              gdi_check_timeout: 20000
              io_client_redirect_outcome_path: 'https://api.platform.pagopa.it/ecommerce/io-outcomes/v1/transactions'
              checkout_client_redirect_outcome_path: 'https://checkout.pagopa.it/v2/esito'
              show_continue_io_btn_delay_millis: 2000
              io_client_redirect_card_data_outcome_path: 'https://api.platform.pagopa.it/ecommerce/io-outcomes/v1/payments/cards/outcomes'
              io_client_save_card_fail_redirect: 'https://api.platform.pagopa.it/payment-wallet-outcomes/v1/wallets/contextual-onboard/outcomes'
              use_ecommerce_fe_root_path: ${{parameters.USE_ECOMMERCE_CDN}}

          - script: |
              yarn build
            displayName: 'Build with `/` root path'
            condition: eq(${{parameters.USE_ECOMMERCE_CDN}}, true)

          - script: |
              yarn build:ecommerce-fe-root
            displayName: 'Build with `/ecommerce-fe` root path'
            condition: eq(${{parameters.USE_ECOMMERCE_CDN}}, false)

          - publish: $(System.DefaultWorkingDirectory)/dist
            artifact: Bundle_PROD

  - stage: UAT_to_PROD_promotion
    dependsOn:
      - Prepare_artifact_prod
    jobs:
      - job: Deploy_Prod_WaitForApproval
        displayName: Wait for PROD approval
        pool: server
        timeoutInMinutes: 4320 # 3 days
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 4320 # 3 days
          inputs:
            onTimeout: 'skip'

  - stage: Deploy_PROD_pagoPA
    dependsOn:
      - UAT_to_PROD_promotion
    jobs:
      - job: 'deploy'
        steps:
          - checkout: none

          - download: current
            artifact: Bundle_PROD

          - task: AzureCLI@1
            displayName: 'Sync checkout storage on PROD'
            inputs:
              azureSubscription: 'PROD-PAGOPA-SERVICE-CONN'
              scriptLocation: inlineScript
              inlineScript: |
                ${{ variables.PROD_STORAGE_BLOB_SYNC }}

          - task: AzureCLI@1
            displayName: 'Purge CDN endpoint on PROD'
            inputs:
              azureSubscription: 'PROD-PAGOPA-SERVICE-CONN'
              scriptLocation: inlineScript
              inlineScript: |
                ${{ variables.PROD_PURGE_CDN_COMMAND }}
